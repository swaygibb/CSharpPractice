// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CSharpPractice.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502225549_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Meet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Federation")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetCountry")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetState")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeetTown")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetID")
                        .IsUnique();

                    b.ToTable("Meets");
                });

            modelBuilder.Entity("PowerliftingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Bench4Kg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BestBenchKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BestDeadliftKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BestSquatKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BodyweightKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Deadlift4Kg")
                        .HasColumnType("TEXT");

                    b.Property<string>("Division")
                        .HasColumnType("TEXT");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Place")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Squat4Kg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WeightClassKg")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Wilks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetID");

                    b.ToTable("PowerliftingResults");
                });

            modelBuilder.Entity("PowerliftingResult", b =>
                {
                    b.HasOne("Meet", "Meet")
                        .WithMany("Results")
                        .HasForeignKey("MeetID")
                        .HasPrincipalKey("MeetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meet");
                });

            modelBuilder.Entity("Meet", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
